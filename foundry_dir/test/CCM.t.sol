// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;
import "test/helper.sol";

contract CCMTest is Test {
    address deployer=vm.addr(1);
    address addr1=vm.addr(11);
    address addr2=vm.addr(0x64);
    address eccd;
    address factory;
    address callerp;
    address calleriMock;
    address ccmp;
    address ccmi;

    address lockProxyProvidedBytesCode;
    address targetChainLockProxy;
    
    address erc20ProvidedByteCode;
    address NBCoin;

    address msgGenerator;
    address ethSignMsgGenerator;

    bytes rawHeader;
    bytes rawSeals;
    bytes accountProof;
    bytes storageProof;
    bytes rawCrossTx;
    function setUp() public {
        rawHeader=abi.encodePacked(hex"f90224a049c7bf7dea15e8e3158dddb8299a3a723b1172ad4394cc377e41b61a590921e4a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948c09d936a1b408d6e0afaa537ba4e06c4504a0aea078eb71b4a058341879c13710e7fef0ed508d5842593072d7be6af496da2d6129a0211dbff6043c63db8ccdfe4aef0da68e06dc6dc64c9e4d24d2577e82d074979ca02b11c5c980ac1d1071f7898afd404078dd823bae9e301e9595b835ce8f7e9a1bb9010000000000000000000004004000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000018303132d8411e1a3008370866c8462f0bfd3a90000000000000000000000000000000000000000000000000000000000000000c883030d40c080c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        rawSeals=abi.encodePacked(hex"f8c9b8415bff4fc15f342e390623d1ffb8650c9ad9314e8ab96d2698f6a0fd09fe940fc72099f28a3ae81073702d5ecc44c68f0d8aaa84622732db01bee8848fed8dea1700b841a76058db32b23ac1241cb101501427e0c361c1ccfeb26abbf248e1bc87be4a4e4045520f60a91b776bdd1493b1f6a115c34e8cdc28926b3f686a92bef75d368901b8419f5e9a13110db6e0c38b5add2f58ae4eb1a39b57b4c324516d99e486be572acd29b249e8e66d3fdfcf99efe0e46b3cd7f48f9fa0f05d0cef9a798fb22429ff0501");
        accountProof=abi.encodePacked(hex"b906d9f90211a091f91e159833a385f919ab4b838823f5ea0070db38af873c4bd3699c5d722dc3a0344c921a968d234a54e7e34df15d2d48df458079afdd2f686a713b3106be6ee9a0dfafcba5a820f352651eba66a210ef9bc3eafb51c876550937b28bbdd3b4c1eba0ec26eb01d12a70c081b62dffbd9bf34641824440d5f114161e719d133fc92ecca03762a2a13d65b6678799c4ddb178c14661f982cdfd238453192bb7e0922ae24ba01d60702eda0d4a42dd344c67478b0a9cf3dd0e1664ca5dbca8732f7c5b542bcfa070614cfb74225642617bd8dfa64b550e42e600520e76502a820a14a34292fe62a0488b86fe9bfbac76847ab06dd3bd68fb35d67bbcb76e9df84d32d44706301358a01b82b768aeb151dbe912a269a3a621080e62b010e2e62304f1542d536792dcdaa092944e43225f3839d780c710fc1946901d812502dcc5f1ce991080f49f15287ea0e7f9feb7a2a09f9a2656a88c4f3aeb0d37b11e7be03d053e03dfa6c76655cadba01fb1a69fdbfec141620ce5dcadcc767200ec2ca8a1d9f1baec07a6f3a1d3e4e0a066eca95348b6713c479a8696e78ca6878f7a214087d903ead6bc5af39ac9de41a0b3ceb84125de653d0221c7bc80f9df6ac719782f97b4d3bd355248e10cebecaca026165fd238b632cab88e7c2b1a86c259e24968639d131cee88b7acbb4bc4bfdaa05926b62ca522e3030632fa4f7a4bcd0f7d170503eeb7f768e36aeed5b351e70680f90211a0028128a0e3a64baae16e071354725fc79d11e97bbae2b8f1aeeb240a55739a31a0d52769a1ca2f36ff5b36f8db38a87328d0b361c1915e9c2a542c0a4a8908680aa0f230cd6867421b8a11b50a3f8dc9ac7164a31223a7c36c7925b59efffa74bbf8a0f6eeadea3a75ee61b0af1a150085fabbafcacb62da1d58c2703896c8c8ccf2dca03d58509f7e7d9fe1790b892454e915df9b2efecfaaaa7da8fab259b96cb177fda0743bfbf7bda37d06f758128026ea6e0cff7305373fd814ea20fb9bf70b34986ea0979983c95f13d0971b4bdaff4c9847c87c3178cd6a9f08a49a1a85149aa733a0a0d22b5cb93c9e6f871b280cece882c467d87be0dfb34bb1037ccdd630b9c7e02da092bbd105fe70b7f168ea22f0958b0212f27114d32ee2740206e2451cd253f9b4a0aadf877bf93a25f3654ed59902ce9b2ee6794953df9dbcd08349626cf174db9ca018faace344e99221c081d765856d6ea5a7e8abfc161821cf0484c60fa4feb623a0aae62ffdf1ae138ac7edce98832543cb5286fa4160e6644db60650dcb86b780ea06bf03778eb7f72dfef8749edf78279005dff5d682dda2a8195849565a9ae89d5a077b5f729d24585bb04e3c0377a6c4711d642a43b57d494357858734da43d353ba0e45f626a7e424e6c9d0f3320306c89e8cc42ab87dd6e04ae93cd8ff422e95e5fa0155d5cf5a26b97f9540eb75f625f1a6d4a2b672cacc1872170593e87d0da4aef80f901d1a0fa25502799d1908b0143d2cb592fc4de149fd0758b456b6ca642aea5673bf75fa05d487b0a928597d932a4f83e20bee64dc2fcde021a77487b4c1d31fb037aad1980a093d5704e0baca4c0883ff0680467613572c52cc3ad07a3b4e8de56b5178d0a74a01904c2403eb1837c9c7a01feed1713d015d3a81546276add055a81067f953674a038723e4aff87b6a37b259981095352d8b8f01dfbb3b70367d5572598d31e8dfda04806707e52efbe92761c845de32f577789c3bb58a147b0d79967663787476f7ca02fbe24a6502e8ef9e4ec0214164f5e4e9e2e804fbb51ff12a886f601e24da25480a0cfd7f39087ef1e05f83d2932945c4684c18f6a9c2b762bf0fe984f1a419b6914a0697ad12c00abb48e78670cce72a19b909c22d6ffd161440435964c2dad0071eba0ea670c3a2f971054d822843a6ec6514e5ff1ffe4227ca1de41509e3afec1bd0da0cd8a6b3453bf974b256f417956b01914834d637d5f5ed54ce643c8eb8fe553b6a099597f33ae9469f97509c81af06733b3118d5c1f9236ef8a128547620f41661ea0c934addf166b732d03f5d4fabdc0fd0ce9f442e920081c76e769f09abfab993ca0633dfd8a5f3523049e3f0852e44a89e8ab485b8510f0c62d761c2ebb0ed8a53380f8718080a0d6ff1710118937a075990e1dc6e0139eb70d5a95ea42e0031353dfe77992aaee80a0510927c70976f1d4082ebe8f84ac1cf744d2e9940446ec52f2fd628d5154b5b78080808080808080a0b6113d0fcee93e8fba77c1db2fbb70909b2dbc450f042b074f2f439526769593808080f8689f20e65ccffb133d9db4ff637e62532ef6ecef3223845d02f522c55786782911b846f8440180a0d2a31307c2ef1e9692abbcaf4ef155af53323412e89677a04fef31abb0e5cf8ba0c874e65ccffb133d9db4ff637e62532ef6ecef3223845d02f522c55786782911");
        storageProof=abi.encodePacked(hex"b901d9f90191808080a0b4c0881206c7ba3f6519042e604eca773b57f756bb0cae345297c2189dd6b668a0845ca3c6f035135475da622024571bdba14f749e1f660b7edbd6a7a8151200eaa0545313f2a77d43e21fd63b3d2dd4276d4ae8d6d8825bf50ab180c8a472ed8519a0937f568bc96d0b67aba5e750d93caf2f1a07b33bc4ceaf57daa37c5185031ddea0431346eaf78f74c9f8696cb59912cc928dbef4798c6582a9f32e2720db2614bba095b3ba44526f0e612d4d689ace60b78ed712c582509e53a3f7ab73d0037fb94ba0f02b6e0ab896787da5523d2fcfdfab3d1df22f5feb12cd5b5577a6ce9294340ba098e5aafb930bdc1171247684df2cde099eff8b1810a977a3b591633e0892b2d2a0ebd9899a4559c8380a678207967add08914949bcfe6ad1de8629599e9ee91abea0d564898a156a2a9cb94c3c02a188651fb76f4853550b8c476e2ae014b604352da0f621181dbc686ad20aa63935b61b7219a91c2143fc44c7bc12025785e7f60ea180a0dc84a47dd056248478e04887a6cc99809f36c47a08c013ad25879948734e526e80f843a0361d804719ee7e6efe2313c684592e942e67d844ca18e40e30f50c07c1d5a908a1a0609a56b32fde66d8fdeb49bd509f4a5b7ed7717de995df9dfd30ca98dfd7be54");
        rawCrossTx=abi.encodePacked(hex"f8e5a0a0f09ed6a8cc85aed3bf58c936ffab8feb1e1cbdfe4dd615557fea5026c9d6f581caf8c0a00000000000000000000000000000000000000000000000000000000000000000a093c06b1a7185ff4d8f1139515ca8ed7d6d877b184dddc71dc5cd32f4c3d55adf94c66e765d2555e9634101668ff6845d820733f5594f94f0a8515244b2dc9c7885cc3d83b04d976803c19886756e6c6f636bb84a147466366d6d303f41a1876c45b1acfbc2b17123e4140c888cca1190940ebc156d4cf13cbf880a83e4a30100000000000000000000000000000000000000000000000000000000000000");

        // bsc,target chain
        targetChainLockProxy = 0xf0a8515244b2Dc9c7885cc3d83b04D976803c198;
        // bsc NBcoin
        NBCoin = 0x7466366D6d303f41a1876C45B1AcFBc2b17123e4;

        vm.startPrank(deployer);
        eccd= deployCode("EthCrossChainData.sol");
        lockProxyProvidedBytesCode=deployCode("LockProxy.sol");
        vm.etch(targetChainLockProxy, lockProxyProvidedBytesCode.code);
        vm.store(targetChainLockProxy,bytes32(uint256(0)),bytes32(abi.encodePacked(hex"000000000000000000000000",deployer)));

        address[] memory addressArr = new address[](1);
        addressArr[0]=targetChainLockProxy;
        factory= deployCode("CallerFactory.sol",abi.encode(addressArr));

        erc20ProvidedByteCode = address(new NBERC20("NB","NB",6));
        vm.etch(NBCoin,erc20ProvidedByteCode.code);
        IERC20(NBCoin).initialize();
        IERC20(NBCoin).transfer(targetChainLockProxy,1000000);
        assertEq(IERC20(NBCoin).balanceOf(targetChainLockProxy),1000000);

        vm.stopPrank();
        
        ccmi = deployCode("EthCrossChainManagerImplementation.sol");

        ccmp=deployCode("EthCrossChainManager.sol",abi.encode(ccmi,deployer,""));
        
        require(IEthCrossChainData(eccd).owner()==deployer);
        vm.prank(deployer); 
        IEthCrossChainData(eccd).transferOwnership(ccmp);
        require(IEthCrossChainData(eccd).owner()==ccmp);
        
        calleriMock=deployCode("callerMock.sol:CallerImplementationMock");
        msgGenerator=deployCode("callerMock.sol:CallerSigMsgGen");
        ethSignMsgGenerator=deployCode("callerMock.sol:EthSigMsgGen");

        callerp=ICallerFactory(factory).deploy(111,calleriMock,addr1,abi.encodeWithSelector(bytes4(keccak256("initialize(address)")),ccmp));

        // console.log("eccd address: %s",eccd);
        // console.log("callerp address: %s",factory);
    }

    function testDeployCaller() public {
        uint salt=777;
        address preCalcAddress=ICallerFactory(factory).getDeploymentAddress(salt,addr1);
        require(!ICallerFactory(factory).isChild(preCalcAddress));
        
        vm.prank(addr1);
        ICallerFactory(factory).deploy(salt,calleriMock,addr1,abi.encodeWithSelector(bytes4(keccak256("initialize(address)")),ccmp));
        require(ICallerFactory(factory).isChild(preCalcAddress));
        require(!ICallerFactory(factory).isChild(ccmp));
        require(ICallerImplementationMock(preCalcAddress).whoAmI()==1);
    }

    function testDeployCallerWithSignature() public {
        uint salt=1234;
        address logic=calleriMock;
        address admin=addr2;
        address signer = addr2;
        bytes memory data= abi.encodeWithSelector(bytes4(keccak256("initialize(address)")),ccmp);
        bytes32  msgNeededToSign = ICallerSigMsgGen(msgGenerator).getSigMsg(salt,logic,admin,data,factory);
        bytes32 newMsgNeededToSign= IEthSigMsgGen(ethSignMsgGenerator).toEthSignedMessageHash(msgNeededToSign);
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(0x64, newMsgNeededToSign);
        bytes memory signature=abi.encodePacked(r,s,v);

        address preCalAddress = ICallerFactory(factory).getDeploymentAddress(salt,signer);
        require(!ICallerFactory(factory).isChild(preCalAddress));
        ICallerFactory(factory).deploySigned(salt,logic,admin,data,signature);
        require(ICallerFactory(factory).isChild(preCalAddress),"preCalAddress is not chid of proxy factory");
    }

    function testCanNotDeployCallerWithFakeSignature() public {
        uint salt=1234;
        uint sale_fake=7890;
        address logic= calleriMock;
        address admin  =addr2;
        address signer = addr2;
        bytes memory data= abi.encodeWithSelector(bytes4(keccak256("initialize(address)")),ccmp);
        bytes32  msgNeededToSign = ICallerSigMsgGen(msgGenerator).getSigMsg(sale_fake,logic,admin,data,factory);
        bytes32 newMsgNeededToSign= IEthSigMsgGen(ethSignMsgGenerator).toEthSignedMessageHash(msgNeededToSign);
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(0x64, newMsgNeededToSign);
        bytes memory signature=abi.encodePacked(r,s,v);

        address preCalAddress = ICallerFactory(factory).getDeploymentAddress(salt,signer);
        require(!ICallerFactory(factory).isChild(preCalAddress));
        ICallerFactory(factory).deploySigned(salt,logic,admin,data,signature);
        require(!ICallerFactory(factory).isChild(preCalAddress),"preCalAddress is not child of proxy factory");
    }

    function testCallerP_CanNotChangeImplementationByNonAdmin() public {
        vm.expectRevert();
        IEthCrossChainCaller(callerp).upgradeTo(calleriMock);
    }

    function testCallerP_CanChangeImplementationByAdmin() public {
        address calleriMock2=deployCode("callerMock.sol:CallerImplementationMock_2");
        
        vm.prank(addr1);
        IEthCrossChainCaller(callerp).upgradeTo(calleriMock2);
        assertEq(ICallerImplementationMock_2(callerp).whoAmI(),2);
        
        vm.prank(addr1);
        IEthCrossChainCaller(callerp).upgradeTo(calleriMock);
        assertEq(ICallerImplementationMock(callerp).whoAmI(),1);
    }
    
    function testCallerP_CanNotChangeAdminByNonAdmin() public {
        vm.expectRevert();
        IEthCrossChainCaller(callerp).changeAdmin(addr2);
    }

    function testCallerP_CanChangeAdminByAdmin() public {
        vm.prank(addr1);
        IEthCrossChainCaller(callerp).changeAdmin(addr2);

        vm.prank(addr1);
        vm.expectRevert();
        IEthCrossChainCaller(callerp).changeAdmin(addr2);

        vm.prank(addr2);
        IEthCrossChainCaller(callerp).changeAdmin(addr1);
    }
    
    // test eccm

    function testEccmP_CanChangeImplementationByAdmin() public {
        address ccmi2 = deployCode("EthCrossChainManagerImplementation.sol");
        vm.startPrank(deployer);
        IEthCrossChainManager(ccmp).upgradeTo(ccmi2);
        assertEq(ccmi2,IEthCrossChainManager(ccmp).implementation());

        IEthCrossChainManager(ccmp).upgradeTo(ccmi);
        assertEq(ccmi,IEthCrossChainManager(ccmp).implementation());
        
    }

    function testEccmP_CanNotChangeImplementationByNonAdmin() public {
        address ccmi2 = deployCode("EthCrossChainManagerImplementation.sol");
        vm.expectRevert();
        IEthCrossChainManager(ccmp).upgradeTo(ccmi2);
    }

    function testEccmP_CanChangeAdminByAdmin() public {
        vm.prank(deployer);
        IEthCrossChainManager(ccmp).changeAdmin(addr1);

        vm.prank(addr1);
        IEthCrossChainManager(ccmp).changeAdmin(deployer);
    }

    function testEccmP_CanNotChangeAdminByNonAdmin() public {
        vm.expectRevert();
        IEthCrossChainManager(ccmp).changeAdmin(addr1);
    }

    function testCanCallCrossChainFromValidCaller() public {
        bytes memory args="0x123456";
        uint txIndex = IEthCrossChainData(eccd).getEthTxHashIndex();
        assertEq(0,txIndex);
        // console.logBytes32(IEthCrossChainData(eccd).getEthTxHash(txIndex));

        ICallerImplementationMock(callerp).lock(args);
        
        

        uint newTxIndex = IEthCrossChainData(eccd).getEthTxHashIndex();
        assertEq(1,newTxIndex);
        // console.logBytes32(IEthCrossChainData(eccd).getEthTxHash(txIndex));
    }
    
    function testCanNotCallCrossChainFromInvalidCaller() public {
        bytes memory args="0x123456";
        ICallerImplementationMock(calleriMock).initialize(ccmp);
        vm.expectRevert(bytes("call ccm failed"));
        ICallerImplementationMock(calleriMock).lock(args);
    }
    
    function testShouldSuccessInitGenesisblockAtUninitializedCCM() public {
        // handly construct rawHeader,add endHeight
        bytes memory _rawHeader = abi.encodePacked(hex"f9027ca033e88dd0400d04b6a399646edfa2fa361682d0ca4e5920965a68a26ea8cfbc1ca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946a708455c8777630aac9d1e7702d13f7a865b27ca0b7d02a9e63b667c814829e7595876d81e036a824f32d9d0380e98d77fb396ac1a03c2377014824c0e204d8a8382e0987d492869ee76f5c015e5e8596795575493ca0c6d5c22465cfbefbaa1caff66339e01401775c3577ca5beba4d421ab3259d8a6bc3508411e1a30083624a2f8462e9d028b8810000000000000000000000000000000000000000000000000000000000000000f85c82c350821234f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),0);

        IEthCrossChainManagerImplementation(ccmp).initGenesisBlock(_rawHeader);
        // assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),50001);

        // encoded Validator Public keys
        // console.logBytes(IEthCrossChainData(eccd).getCurEpochValidatorPkBytes());
    }

    
    function testShouldFailInitGenesisblockAtInitializedCCM() public {
        bytes memory _rawHeader = abi.encodePacked(hex"f90279a033e88dd0400d04b6a399646edfa2fa361682d0ca4e5920965a68a26ea8cfbc1ca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946a708455c8777630aac9d1e7702d13f7a865b27ca0b7d02a9e63b667c814829e7595876d81e036a824f32d9d0380e98d77fb396ac1a03c2377014824c0e204d8a8382e0987d492869ee76f5c015e5e8596795575493ca0c6d5c22465cfbefbaa1caff66339e01401775c3577ca5beba4d421ab3259d8a6bc3508411e1a30083624a2f8462e9d028b87e0000000000000000000000000000000000000000000000000000000000000000f85c82c350f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),0);
        IEthCrossChainManagerImplementation(ccmp).initGenesisBlock(_rawHeader);
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),50001);
        vm.expectRevert(bytes("EthCrossChainData contract has already been initialized!"));
        IEthCrossChainManagerImplementation(ccmp).initGenesisBlock(_rawHeader);
    }
    
    function testShouldFailChangeEpochWithIncorretHeader() public {
        bytes memory IncorrectRawHeader = abi.encodePacked(hex"1234");
        bytes memory _rawSeals = abi.encodePacked(hex"f8c9b84114c5458ce69ce18d60bd17048d26a45360a55109d10c58cae186a0f5ae8eccef2510f0c903a7720cd141e13045e9af11465e075cff414e8ff82b53e5c2cb09f400b841837da90fe6cf1fe4498e8d27ab62a389c2daae6ce57b3e10d8793134fbf0df7b3d096d0627ace26fd0d4f4b509f0445b7677422325b4be5c37d308e12634def201b8415ad146ef1397777a2c3b9579adef2dec9835991bd9ef7aa99337a13187b3782c4057c7d9597d7632c90bfb00c6a8f12d46b2b0678b0af07a660bc8f323bc18f901");
        vm.expectRevert();
        IEthCrossChainManagerImplementation(ccmp).changeEpoch(IncorrectRawHeader,_rawSeals);
    }

    function testShouldFailChangeEpochWithIncorretSeals() public {
        bytes memory _rawHeader = abi.encodePacked(hex"f9027ba06684b3fbd76bd0d02ba05f278c8cfd8a198cf742e3fa8111c9c3edf46de6a294a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946a708455c8777630aac9d1e7702d13f7a865b27ca0e48945bf8b158a6640bc937ce827f881238eb46640355b8ffb2745c72a1e5252a00b27cd987212c619153b0086265c7c81a7a581569cca8d8c665acc5a3393842fa09935ccfeb65a91321df714f7cd08caf5ddd8d0d128bb6d3aa39025fb7e275662be1a3008362b0b08462eaba9cb87f0000000000000000000000000000000000000000000000000000000000000000f85d83011170f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        bytes memory IncorrectRawSeals = abi.encodePacked(hex"f8c9b84138c24b05d7fb593f97a7812a4e0fe69e55579489d281bb839add9c229667a98f4b156c72d75015e38faa6783d59b34c94f3afdc5724d8601b25d0996f102f95d01b841235ba92898df5c801f6396ac1f897ea27c67ec0e34a187f6592b31923a69549e0d7a3e0daa6e68b427b7ab1416e43cb6f2dbf375ebb2c3c0daf8230a7d3c018501b841738f21896ecda7ea37b4beaf2c99d25d3c957e970b32f50cf1a8f72a6fe7e44f737aa6d0fea4391a8fe00b8d8f83f085b09131757e9d0ed557e9ba0413f1b9ab01");
        vm.expectRevert();
        IEthCrossChainManagerImplementation(ccmp).changeEpoch(_rawHeader,IncorrectRawSeals);
    }

    function testShouldFailChangeEpochWithBlockHeightLessThanEpochStartHeight() public {
        bytes memory rawHeaderInit = abi.encodePacked(hex"f90279a033e88dd0400d04b6a399646edfa2fa361682d0ca4e5920965a68a26ea8cfbc1ca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946a708455c8777630aac9d1e7702d13f7a865b27ca0b7d02a9e63b667c814829e7595876d81e036a824f32d9d0380e98d77fb396ac1a03c2377014824c0e204d8a8382e0987d492869ee76f5c015e5e8596795575493ca0c6d5c22465cfbefbaa1caff66339e01401775c3577ca5beba4d421ab3259d8a6bc3508411e1a30083624a2f8462e9d028b87e0000000000000000000000000000000000000000000000000000000000000000f85c82c350f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),0);

        IEthCrossChainManagerImplementation(ccmp).initGenesisBlock(rawHeaderInit);
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),50001);
        // console.logBytes(IEthCrossChainData(eccd).getCurEpochValidatorPkBytes());

        // height is 80001
        bytes memory rawHeader1=abi.encodePacked(hex"f9027ba04ff0f43ea179122d12bb8126c904773f72472114ded141bef1318263d0e89e30a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946a708455c8777630aac9d1e7702d13f7a865b27ca0117a093d542f56513939411c637fff948d92e1a29e48d5b4fa140081e0d4d476a037645a8cc8d65571e4f1e9075fca12a2f41004ee740509e60eeb0365e3484278a054cfb09144581372567bb5eaada5fd244d167130b4a42948aeae4d9977f9dc89be1a3008362b0b08462eb2fccb87f0000000000000000000000000000000000000000000000000000000000000000f85d83013880f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        bytes memory rawSeals1=abi.encodePacked(hex"f8c9b8417377aca7a51dadb399a41f645a54cc3278608b6ac2e8bc9c8f429f67c69f35457df30a9a38be0deb14a257e5b7eba02d29dcd3780da63c4fe3a302c7b3e471d601b8414546bcdc1067f50feae5c99b0f4cb9c525c3344e977cb5f6bc9d5646bfcfcb56213c8a307f454932806221977faa1d6fc48d868d0858278a27694c9c8c01195500b841ca7b7912853bb64e6981e6f0ed265508d0ed71186bbf1f434945e4767b2da6d83f97f4fab522235f4fe184652043b413a6f7fbb5dd20bb983d24e535d0f73ff100");
        IEthCrossChainManagerImplementation(ccmp).changeEpoch(rawHeader1,rawSeals1);

        // height is 70001
        bytes memory rawHeader0 = abi.encodePacked(hex"f9027ba06684b3fbd76bd0d02ba05f278c8cfd8a198cf742e3fa8111c9c3edf46de6a294a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946a708455c8777630aac9d1e7702d13f7a865b27ca0e48945bf8b158a6640bc937ce827f881238eb46640355b8ffb2745c72a1e5252a00b27cd987212c619153b0086265c7c81a7a581569cca8d8c665acc5a3393842fa09935ccfeb65a91321df714f7cd08caf5ddd8d0d128bb6d3aa39025fb7e275662be1a3008362b0b08462eaba9cb87f0000000000000000000000000000000000000000000000000000000000000000f85d83011170f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        bytes memory rawSeals0 = abi.encodePacked(hex"f8c9b84138c24b05d7fb593f97a7812a4e0fe69e55579489d281bb839add9c229667a98f4b156c72d75015e38faa6783d59b34c94f3afdc5724d8601b25d0996f102f95d01b841235ba92898df5c801f6396ac1f897ea27c67ec0e34a187f6592b31923a69549e0d7a3e0daa6e68b427b7ab1416e43cb6f2dbf375ebb2c3c0daf8230a7d3c018501b841738f21896ecda7ea37b4beaf2c99d25d3c957e970b32f50cf1a8f72a6fe7e44f737aa6d0fea4391a8fe00b8d8f83f085b09131757e9d0ed557e9ba0413f1b9ab01");
        vm.expectRevert(bytes("Given block height is lower than current epoch start height"));
        IEthCrossChainManagerImplementation(ccmp).changeEpoch(rawHeader0,rawSeals0);
    }

    function testShouldSuccessChangeEpochWithCorretHeader() public {
        bytes memory rawHeaderInit = abi.encodePacked(hex"f90279a033e88dd0400d04b6a399646edfa2fa361682d0ca4e5920965a68a26ea8cfbc1ca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946a708455c8777630aac9d1e7702d13f7a865b27ca0b7d02a9e63b667c814829e7595876d81e036a824f32d9d0380e98d77fb396ac1a03c2377014824c0e204d8a8382e0987d492869ee76f5c015e5e8596795575493ca0c6d5c22465cfbefbaa1caff66339e01401775c3577ca5beba4d421ab3259d8a6bc3508411e1a30083624a2f8462e9d028b87e0000000000000000000000000000000000000000000000000000000000000000f85c82c350f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),0);

        IEthCrossChainManagerImplementation(ccmp).initGenesisBlock(rawHeaderInit);
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),50001);
        // console.logBytes(IEthCrossChainData(eccd).getCurEpochValidatorPkBytes());

        bytes memory rawHeader0 = abi.encodePacked(hex"f9027ba06684b3fbd76bd0d02ba05f278c8cfd8a198cf742e3fa8111c9c3edf46de6a294a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946a708455c8777630aac9d1e7702d13f7a865b27ca0e48945bf8b158a6640bc937ce827f881238eb46640355b8ffb2745c72a1e5252a00b27cd987212c619153b0086265c7c81a7a581569cca8d8c665acc5a3393842fa09935ccfeb65a91321df714f7cd08caf5ddd8d0d128bb6d3aa39025fb7e275662be1a3008362b0b08462eaba9cb87f0000000000000000000000000000000000000000000000000000000000000000f85d83011170f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        bytes memory rawSeals0 = abi.encodePacked(hex"f8c9b84138c24b05d7fb593f97a7812a4e0fe69e55579489d281bb839add9c229667a98f4b156c72d75015e38faa6783d59b34c94f3afdc5724d8601b25d0996f102f95d01b841235ba92898df5c801f6396ac1f897ea27c67ec0e34a187f6592b31923a69549e0d7a3e0daa6e68b427b7ab1416e43cb6f2dbf375ebb2c3c0daf8230a7d3c018501b841738f21896ecda7ea37b4beaf2c99d25d3c957e970b32f50cf1a8f72a6fe7e44f737aa6d0fea4391a8fe00b8d8f83f085b09131757e9d0ed557e9ba0413f1b9ab01");
        IEthCrossChainManagerImplementation(ccmp).changeEpoch(rawHeader0,rawSeals0);
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),70001);


        bytes memory rawHeader1=abi.encodePacked(hex"f9027ba04ff0f43ea179122d12bb8126c904773f72472114ded141bef1318263d0e89e30a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946a708455c8777630aac9d1e7702d13f7a865b27ca0117a093d542f56513939411c637fff948d92e1a29e48d5b4fa140081e0d4d476a037645a8cc8d65571e4f1e9075fca12a2f41004ee740509e60eeb0365e3484278a054cfb09144581372567bb5eaada5fd244d167130b4a42948aeae4d9977f9dc89be1a3008362b0b08462eb2fccb87f0000000000000000000000000000000000000000000000000000000000000000f85d83013880f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        bytes memory rawSeals1=abi.encodePacked(hex"f8c9b8417377aca7a51dadb399a41f645a54cc3278608b6ac2e8bc9c8f429f67c69f35457df30a9a38be0deb14a257e5b7eba02d29dcd3780da63c4fe3a302c7b3e471d601b8414546bcdc1067f50feae5c99b0f4cb9c525c3344e977cb5f6bc9d5646bfcfcb56213c8a307f454932806221977faa1d6fc48d868d0858278a27694c9c8c01195500b841ca7b7912853bb64e6981e6f0ed265508d0ed71186bbf1f434945e4767b2da6d83f97f4fab522235f4fe184652043b413a6f7fbb5dd20bb983d24e535d0f73ff100");
        IEthCrossChainManagerImplementation(ccmp).changeEpoch(rawHeader1,rawSeals1);
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),80001);

        bytes memory rawHeader3=abi.encodePacked(hex"f9027ba019231683021fa206684aa16d95097d6ffa1734377e6fce762337dee0076e03b5a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946a708455c8777630aac9d1e7702d13f7a865b27ca0790684c42a83d1761a3b56e1be7f598840e68be545b205553192faaf5f60e2e1a0576065e4e0ddf86e7d3ac41ea6ff4e98831a4a0fa05ea2e048108cd6d7b0f355a0c0ce366fa67134b4ca93d85aa9ddb2a8a502be2dbf759910d21237cc0a427c3abd9a08411e1a3008362b0b0846302132cb87f0000000000000000000000000000000000000000000000000000000000000000f85d8308d9a0f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        bytes memory rawSeals3=abi.encodePacked(hex"f8c9b841d688be136aad03999b8354fd9aaeb26c8111b54b6cb8089ba5930bf233c90b86588799fba6de52102943cbe7341d69ad8c07a25620c0f48e17f3ad085984187b00b841a5fe1673bab84d89e23ed6eaafd0ac3feafa8195013f1296bfc7b62443e3a6ea42125314b777723ec9b68597d52a39d08e73be1422f72de3c23bf0230fde1d5d01b84198149e0b475f0c21080965f7c7a4ccc093c27e1e123e4399467de630fd3bfe696bee5b3e2177dd1d7abd081cec18afd67a793fceca5fdce2fd78b5b53056a11201");
        IEthCrossChainManagerImplementation(ccmp).changeEpoch(rawHeader3,rawSeals3);
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),580001);

        bytes memory rawHeader2=abi.encodePacked(hex"f9027ba0d7f260d202d3c792b3550f7448d6d17bd6958479af3879c79591068abdfec109a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948c09d936a1b408d6e0afaa537ba4e06c4504a0aea0258ce10413fa0dfaf6891b5169cd11604ae5db5951607215533ce5a43a8106c2a0a2a19269566190455384da53f8025a3b6b082b74a9a38701396d4d8b4521a6bea0d4e4d938901e00ea4da08917593dba522a19b68413162444389bb35251dd96e3bfa08411e1a30083029bf88463398f1bb87f0000000000000000000000000000000000000000000000000000000000000000f85d83177fa0f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        bytes memory rawSeals2=abi.encodePacked(hex"f8c9b841620400e7c294d862109b9e21d6ec9b9b8fac80410f4101a27deaafb3b225791f14ef7335c1681c69d02e007056acdbba270ddf7014331d3810cacb590b8442fa00b841eb9d2ece899becd713933f1cd9e95f5181c385fba67e7379efd1686ef586a0ee27345cc4d519b22cb0e9157bac971ea223c1f71a8b4c84412581e4facc782c4f01b8417d3a01e9b0fb9c57451617127c0e50909c920496681cbac167933b3e3e42d6fa3922690a723fcca057c865c0411135cc8e3efed2c15c2aa2039bb0b590bddfea01");
        IEthCrossChainManagerImplementation(ccmp).changeEpoch(rawHeader2,rawSeals2);
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),1540001);        
    }
    
    // helper function for test ExecuteCrossChainTx
    function setInitState() public {
        bytes memory rawHeaderInit = abi.encodePacked(hex"f90279a033e88dd0400d04b6a399646edfa2fa361682d0ca4e5920965a68a26ea8cfbc1ca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946a708455c8777630aac9d1e7702d13f7a865b27ca0b7d02a9e63b667c814829e7595876d81e036a824f32d9d0380e98d77fb396ac1a03c2377014824c0e204d8a8382e0987d492869ee76f5c015e5e8596795575493ca0c6d5c22465cfbefbaa1caff66339e01401775c3577ca5beba4d421ab3259d8a6bc3508411e1a30083624a2f8462e9d028b87e0000000000000000000000000000000000000000000000000000000000000000f85c82c350f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),0);
        
        IEthCrossChainManagerImplementation(ccmp).initGenesisBlock(rawHeaderInit);
        assertEq(IEthCrossChainData(eccd).getCurEpochStartHeight(),50001);

        vm.startPrank(deployer);
        ILockProxy(targetChainLockProxy).bindProxyHash(202,abi.encodePacked(address(0xC66E765D2555e9634101668fF6845d820733f559)));
        ILockProxy(targetChainLockProxy).setManagerProxy(ccmp);
        vm.stopPrank();
    }

    function testShouldSuccessExecuteCrossChainTxWithRightParams() public {
        setInitState();

        IEthCrossChainManagerImplementation(ccmp).verifyHeaderAndExecuteTx(rawHeader,rawSeals,accountProof,storageProof,rawCrossTx);
        assertEq(IERC20(NBCoin).balanceOf(targetChainLockProxy),999999);
        assertEq(IERC20(NBCoin).balanceOf(address(0x0c888cca1190940ebC156d4Cf13cbF880A83E4A3)),1);
    }

    function testShouldFailExecuteCrossTxExists() public {
        setInitState();

        IEthCrossChainManagerImplementation(ccmp).verifyHeaderAndExecuteTx(rawHeader,rawSeals,accountProof,storageProof,rawCrossTx);
        assertEq(IERC20(NBCoin).balanceOf(targetChainLockProxy),999999);
        assertEq(IERC20(NBCoin).balanceOf(address(0x0c888cca1190940ebC156d4Cf13cbF880A83E4A3)),1);

        vm.expectRevert(bytes("the transaction has been executed!"));
        IEthCrossChainManagerImplementation(ccmp).verifyHeaderAndExecuteTx(rawHeader,rawSeals,accountProof,storageProof,rawCrossTx);

    }

    function testShouldFailExecuteCrossChainTxWithIncorrectHeader() public {
        setInitState();
        
        bytes memory incorrectRawHeader = abi.encodePacked(hex"f9027ba0d7f260d202d3c792b3550f7448d6d17bd6958479af3879c79591068abdfec109a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948c09d936a1b408d6e0afaa537ba4e06c4504a0aea0258ce10413fa0dfaf6891b5169cd11604ae5db5951607215533ce5a43a8106c2a0a2a19269566190455384da53f8025a3b6b082b74a9a38701396d4d8b4521a6bea0d4e4d938901e00ea4da08917593dba522a19b68413162444389bb35251dd96e3bfa08411e1a30083029bf88463398f1bb87f0000000000000000000000000000000000000000000000000000000000000000f85d83177fa0f85494258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c80c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000");
        vm.expectRevert(bytes("Verify header failed"));
        IEthCrossChainManagerImplementation(ccmp).verifyHeaderAndExecuteTx(incorrectRawHeader,rawSeals,accountProof,storageProof,rawCrossTx);
    }

    function testShouldFailExecuteCrossChainTxWithIncorrectSeals() public {
        setInitState();
        
        bytes memory incorrectRawSeals = abi.encodePacked(hex"f8c9b84138c24b05d7fb593f97a7812a4e0fe69e55579489d281bb839add9c229667a98f4b156c72d75015e38faa6783d59b34c94f3afdc5724d8601b25d0996f102f95d01b841235ba92898df5c801f6396ac1f897ea27c67ec0e34a187f6592b31923a69549e0d7a3e0daa6e68b427b7ab1416e43cb6f2dbf375ebb2c3c0daf8230a7d3c018501b841738f21896ecda7ea37b4beaf2c99d25d3c957e970b32f50cf1a8f72a6fe7e44f737aa6d0fea4391a8fe00b8d8f83f085b09131757e9d0ed557e9ba0413f1b9ab01");
        vm.expectRevert(bytes("Verify header failed"));
        IEthCrossChainManagerImplementation(ccmp).verifyHeaderAndExecuteTx(rawHeader,incorrectRawSeals,accountProof,storageProof,rawCrossTx);
    }
    
    function testShouldFailExecuteCrossChainTxWithIncorrectAccountProof() public {
        setInitState();
        
        bytes memory incorrectAccountProof = abi.encodePacked(hex"b906d9f90211a08d532d46f6e3bba0cb3948d257f6e301f150cc79f8f44de37b7cabb0e5e28a90a09ab6b0225553bb14024046b0bdbbcebacb5fa9cf6c88bc44f456ce66a9084371a041ef7f05c18437321bb8bd4dc92f37164bf48a3d4cb5cb5cb8f543db7f1d3bd3a0a22666a6ae113058f91759dc850ac31f90444924e095ed3becb03d2df5a9113ca0c3ff20b9f7d13d7fcdc4c70f9c8110182ea66fa24132c167448f9bc8d5f7170da0dd18e1b4eb45f17fcf06ad873fe80513e70688c32c7e8aa2ef0be397cd5741fca067ca345f4488c592fca12ed416e90743d6a8cfd47039afd24f17c38216bdd74ba02a35e3b2876ec907c95e8cdb6300ef171712692f70eb9a581cd76e625a12927ca05c0bb6769cd945d8969e70037bb05f65337fe31302922f28f0d9e2b334ecb416a0281e742d77cc00567f353d2d3961a5a2bb56d3b441877688e1bdaad9a11cf0d1a0f2293502a87febfef01d01e4c10f27fafe62d5880221d0a737a2d4fabf06a297a0ea8bdce1f01c4344a77485fe35034ee7028291bd428f35fe115a138a1c70f42da0fc41cd216eca1b01a8228937d893aef4eac79ef3a160792d382503fb8caa255ba003100b46ea6441be28eb911cddc2ee439b4f73c1b8578345218790a41b3a3e9ba0979cee125f98b063a4b3aaa933d65453c9e1cb24bd9387e2af20546ca440db95a0c9e872e6ada6ec7da02cd9df4d55a2211c4809ee142e6d8ad5c970aee2fdf51d80f90211a0e1bfa6a4f129e84a088006e90643cd2843b072cb45840cf8f10d025db85c35efa000d91ef8aad062127f76f25a40b13befe708c36f3ab44bffdf23963e31fe3efea09495e515e2249c5446d0a2033d694eb401c28496866d52ab0b6cb74f3d7e34bfa057db27a9b46149dc4a8ff32c129fc6227e2f6fcc91e9588ad5fa88edf1578999a0386bdbef669484d3d6e575ae948389e9bc2a34f466a35142ed94bc4ce554bac7a0558c63db03da88aa1a75c1c497998cdde877f2f9a0c1c854e4b68ba2bedc8999a0d83719042804e3432fcf8b90ca563404c32c4461b7fdb97dd1073c2a15ccd9caa00c07a1831680b2dad479e57c05af4a9d5b96decce5b74e6bb6f714b7de2af16ba0170c17ba19ca6c5133750eaf6a9d35e80c25e54029f5a2d2aca0e5536a57ef71a06d4641349f36dc9e35df27a2c671ef3e1563a8c275fb3c44e02d451e69d90cfea01abd46701cba58f70172d6c01aad6d1b3f326e8fe059eda8710e6e586c60865ca011e8310b8b664bd38e4e894ad7cf5e7f53579d88dba640120a8af40254a8b907a09745fa1a16e83779eda0a7becdcc25a94e825c57c405cd99174956603294652ea0631d5d32616f394ad8367b887f522d3eb6fa7a0a0df370bb86dd321146eaae5ea07b7f1b1c16a19051992a90a48e3118767fbe3e02c99117f662a8a540dff5541fa00e3fd808427ae26c99ce62f3fa56bc451856126f1625c717dc5a9c0f10cebd9480f901d1a0366cb4fda6e1525083ea25dec2d379d613db883d0227858f366c21f0db60bc5aa0c0b8386128eb7940bb91baed84d883db555a6966ef6e2259708163991c67e61e80a0bb4ed37a2290e29721940d9630bc7b49ddbb84f2e555842c3a8d2c6461e75111a01db3e435a43426b0747f9ee65b0adb72f7366219c0c6985b7e57a9862b21f62ba083a404c4fdaffcb7c7cbaf8ad4c78516429adb66c0f20f274bd04100864abd3da0f7400ed9b63c9c72ed3a0dd7c2983da2bb935378ef75412d2c401c3b785e60cfa076bc457840a873035ef4dae283b7f666ab023669f81e8c6929b9e7b9a710d95580a02e3d72e30808f6c2e1d5b674762629308f9de94d5e5d937fcaa27cd13ecb7abea0ac6fb745b59a459ee110ee1285ef8b6478bf4ea5ef6c38262a3fdb40f300c5cba02f8f501ea3bd1377358425b5c8f2f9953bc23933c79a5e93300d82aebc43c03ea0c9c145baf0bac7be64e64ca0ab28f672321d3bf17c06d53e6e08c5431b2dd565a0b1e79bc185cd6affbf54e2797e3b10dfb27ebf34cae49acf13aac2a8a4f217cea0a1872378b96ee65c72270e64309609926439655106afd67d63c321a066848ba5a00857d80ed3e83a41a23569d46a15758fdff5cca5b21cf1dc5b61db0271234fd080f8718080a02b7bfaacea2a17405d2a9c4d94bf1b8c7ca2ff4c3ae041319bc2408ae89317c480a0510927c70976f1d4082ebe8f84ac1cf744d2e9940446ec52f2fd628d5154b5b78080808080808080a0f8bd8d6c24794ea20d0af1da11b6689cf9b27c05cd224833decd239e76b7f5d5808080f8689f20e65ccffb133d9db4ff637e62532ef6ecef3223845d02f522c55786782911b846f8440180a0d2a31307c2ef1e9692abbcaf4ef155af53323412e89677a04fef31abb0e5cf8ba0c874e65ccffb133d9db4ff637e62532ef6ecef3223845d02f522c55786782911");
        vm.expectRevert(bytes("proof:unequal node hash"));
        IEthCrossChainManagerImplementation(ccmp).verifyHeaderAndExecuteTx(rawHeader,rawSeals,incorrectAccountProof,storageProof,rawCrossTx);
    }

    function testShouldFailExecuteCrossChainTxWithIncorrectStorageProof() public {
        setInitState();
        
        bytes memory incorrectStorageProof = abi.encodePacked(hex"b901d9f90191808080a0b4c0881206c7ba3f6519042e604eca773b57f756bb0cae345297c2189dd6b668a0845ca3c6f035135475da622024571bdba14f749e1f660b7edbd6a7a8151200eaa0545313f2a77d43e21fd63b3d2dd4276d4ae8d6d8825bf50ab180c8a472ed8519a0937f568bc96d0b67aba5e750d93caf2f1a07b33bc4ceaf57daa37c5185031ddea0431346eaf78f74c9f8696cb59912cc928dbef4798c6582a9f32e2720db2614bba095b3ba44526f0e612d4d689ace60b78ed712c582509e53a3f7ab73d0037fb94ba0f02b6e0ab896787da5523d2fcfdfab3d1df22f5feb12cd5b5577a6ce9294340ba098e5aafb930bdc1171247684df2cde099eff8b1810a977a3b591633e0892b2d2a0ebd9899a4559c8380a678207967add08914949bcfe6ad1de8629599e9ee91abea0d564898a156a2a9cb94c3c02a188651fb76f4853550b8c476e2ae014b604352da0f621181dbc686ad20aa63935b61b7219a91c2143fc44c7bc12025785e7f60ea180a0dc84a47dd056248478e04887a6cc99809f36c47a08c013ad25879948734e526e80f843a03566ea910b72a7f6ddd258fcdc8dd9b65b4b1d19559c5d043aaf754784cbf814a1a0b49e944ca9fe3233c9a1038d86483f2985af6a76af7a1e2a766dc08060d23717");
        vm.expectRevert(bytes("proof:unequal node hash"));
        IEthCrossChainManagerImplementation(ccmp).verifyHeaderAndExecuteTx(rawHeader,rawSeals,accountProof,incorrectStorageProof,rawCrossTx);
    }

    function testShouldFailExecuteCrossChainTxWithIncorrectCrossTx() public {
        setInitState();
        
        bytes memory incorrectCroosTx = abi.encodePacked(hex"f8e5a009584128807a2e3c552e11de48b7f93429becf9178329b7205b8748f22d46ea34ff8c1a00000000000000000000000000000000000000000000000000000000000000003a09a1282450322b7cdbeb439261b5aa3e4c4cc822d17e326d48e9919daf063a1c594f0a8515244b2dc9c7885cc3d83b04d976803c19881ca94c66e765d2555e9634101668ff6845d820733f55986756e6c6f636bb84a1476d56873426cee920f9e8c439ee0a2cecf50d979140c888cca1190940ebc156d4cf13cbf880a83e4a30100000000000000000000000000000000000000000000000000000000000000");
        vm.expectRevert(bytes("proof:unequal node hash"));
        IEthCrossChainManagerImplementation(ccmp).verifyHeaderAndExecuteTx(rawHeader,rawSeals,accountProof,storageProof,incorrectCroosTx);
    }
}