{
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. * Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. * TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. * _Since v2.5.0:_ this module is now much more gas efficient, given net gas metering changes introduced in the Istanbul hardfork.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/lipu/crossChain2.1_with_foundry/eth-contracts/contracts/libs/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"/home/lipu/crossChain2.1_with_foundry/eth-contracts/contracts/libs/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xc7426efe57a3ed4bb174294bc1ce8a3d38340c484c6db3cc9d038f84844d1896\",\"urls\":[\"bzz-raw://7e9a20062cf6e5e2aaeb5106b459ef7031086a488d365d6975901089ca1f1d98\",\"dweb:/ipfs/QmRAwHsfFLm25FhBWnmZhYZiRkmoi8o3yJhDHxWhLxS7xf\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.5.17+commit.d19bba13"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        }
      ],
      "devdoc": {
        "methods": {}
      },
      "userdoc": {
        "methods": {}
      }
    },
    "settings": {
      "remappings": [
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "compilationTarget": {
        "/home/lipu/crossChain2.1_with_foundry/eth-contracts/contracts/libs/utils/ReentrancyGuard.sol": "ReentrancyGuard"
      },
      "libraries": {}
    },
    "sources": {
      "/home/lipu/crossChain2.1_with_foundry/eth-contracts/contracts/libs/utils/ReentrancyGuard.sol": {
        "keccak256": "0xc7426efe57a3ed4bb174294bc1ce8a3d38340c484c6db3cc9d038f84844d1896",
        "urls": [
          "bzz-raw://7e9a20062cf6e5e2aaeb5106b459ef7031086a488d365d6975901089ca1f1d98",
          "dweb:/ipfs/QmRAwHsfFLm25FhBWnmZhYZiRkmoi8o3yJhDHxWhLxS7xf"
        ],
        "license": null
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "/home/lipu/crossChain2.1_with_foundry/eth-contracts/contracts/libs/utils/ReentrancyGuard.sol",
    "id": 14820,
    "exportedSymbols": {
      "ReentrancyGuard": [
        14819
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2257:54",
    "nodes": [
      {
        "id": 14791,
        "nodeType": "PragmaDirective",
        "src": "32:23:54",
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ]
      },
      {
        "id": 14819,
        "nodeType": "ContractDefinition",
        "src": "945:1344:54",
        "nodes": [
          {
            "id": 14793,
            "nodeType": "VariableDeclaration",
            "src": "976:24:54",
            "constant": false,
            "name": "_notEntered",
            "scope": 14819,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 14792,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "976:4:54",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "id": 14801,
            "nodeType": "FunctionDefinition",
            "src": "1007:471:54",
            "body": {
              "id": 14800,
              "nodeType": "Block",
              "src": "1031:447:54",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 14798,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 14796,
                      "name": "_notEntered",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14793,
                      "src": "1453:11:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 14797,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1467:4:54",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1453:18:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 14799,
                  "nodeType": "ExpressionStatement",
                  "src": "1453:18:54"
                }
              ]
            },
            "documentation": null,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "parameters": {
              "id": 14794,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1019:2:54"
            },
            "returnParameters": {
              "id": 14795,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1031:0:54"
            },
            "scope": 14819,
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "id": 14818,
            "nodeType": "ModifierDefinition",
            "src": "1853:434:54",
            "body": {
              "id": 14817,
              "nodeType": "Block",
              "src": "1877:410:54",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 14804,
                        "name": "_notEntered",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14793,
                        "src": "1966:11:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                        "id": 14805,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1979:33:54",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                          "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                        },
                        "value": "ReentrancyGuard: reentrant call"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                          "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                        }
                      ],
                      "id": 14803,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        16382,
                        16383
                      ],
                      "referencedDeclaration": 16383,
                      "src": "1958:7:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 14806,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1958:55:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 14807,
                  "nodeType": "ExpressionStatement",
                  "src": "1958:55:54"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 14810,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 14808,
                      "name": "_notEntered",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14793,
                      "src": "2088:11:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "66616c7365",
                      "id": 14809,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2102:5:54",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "2088:19:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 14811,
                  "nodeType": "ExpressionStatement",
                  "src": "2088:19:54"
                },
                {
                  "id": 14812,
                  "nodeType": "PlaceholderStatement",
                  "src": "2118:1:54"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 14815,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 14813,
                      "name": "_notEntered",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14793,
                      "src": "2262:11:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 14814,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2276:4:54",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2262:18:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 14816,
                  "nodeType": "ExpressionStatement",
                  "src": "2262:18:54"
                }
              ]
            },
            "documentation": "@dev Prevents a contract from calling itself, directly or indirectly.\nCalling a `nonReentrant` function from another `nonReentrant`\nfunction is not supported. It is possible to prevent this from happening\nby making the `nonReentrant` function external, and make it call a\n`private` function that does the actual work.",
            "name": "nonReentrant",
            "parameters": {
              "id": 14802,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1874:2:54"
            },
            "visibility": "internal"
          }
        ],
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@dev Contract module that helps prevent reentrant calls to a function.\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\navailable, which can be applied to functions to make sure there are no nested\n(reentrant) calls to them.\n * Note that because there is a single `nonReentrant` guard, functions marked as\n`nonReentrant` may not call one another. This can be worked around by making\nthose functions `private`, and then adding `external` `nonReentrant` entry\npoints to them.\n * TIP: If you would like to learn more about reentrancy and alternative ways\nto protect against it, check out our blog post\nhttps://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\nmetering changes introduced in the Istanbul hardfork.",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          14819
        ],
        "name": "ReentrancyGuard",
        "scope": 14820
      }
    ]
  },
  "id": 54
}